#!/bin/bash
#=================================================
#    System Required: CentOS 6+/Debian 6+/Ubuntu 14.04+ MacOS
#    Description: K8s工具
#    Version: 1.0.4
#    Author: jinxiao.wu
#    Date: 2023-08-18
#    E-mail: wujx5251@163.com
#=================================================

ns="dev"
stty -echoctl
 
function usage() {
  echo "Usage: [KEYWORD] [-n NAMESPACE] [-a ALL] [-c CONTEXT] [-l CLUSTER] [-h|--help]
 where COMMAND is one of: [-n|-c|-l|-h]
       -n    命名空间
       -c    配置切换
       -a    全部Pod
       -l    配置列表
-h|--help    帮助
  keyword    pod关键字
  "
}

function help() {
  echo "Usage: INDEX [KEYWORD] [-c CONTAINER] [-l LOGS] [-i INFO] [-r RESTART] [-h HELP]
 where COMMAND is one of: [index -l|-c|-i|-r] [-n namespace] [q|r|h]
  id -l    容器日志
  id -i    Pod信息
  id -c    指定进入Pod容器名称
  id -r    Pod重启
     -n    命名空间
      h    帮助
      r    重置Pod列表
      q    退出
keyword    pod关键字
  "
}

function check () {
  if command -v kubectl >/dev/null 2>&1; then 
    return 1
  else 
    return 0
  fi
}

function options () {
  while true; do
    if [ $# -eq 0 ] ; then
      break
    fi
    case "$1" in
      -n)
        ns="$2"
        shift
        ;;
      -c)
        ctx="$2"
        shift
        ;;
      -l)
        cls="1"
        ;;
      -a)
        all="1"
        ;;
       -h|--help)
        usage
        help="1"
        ;;
       *)
        kw=$1
        ;;
    esac
    shift
  done 
}

function args () {
  while true; do
    if [ $# -eq 0 ] ; then
      break
    fi
    case "$1" in
      -c)
        con="$2"
        shift
        ;;
      -n)
        ns="$2"
        shift
        ;;
      -l)
        log="1"
        ;;
      -i)
        inf="1"
        ;;
      -r)
        re="1"
        ;;
       *)
        pod=$1
        ;;
    esac
    shift
  done 
}

function xkube () {
  check
  if [ $? -eq 0 ]; then
    echo "Please install kubectl and set up your working environment and try again"
    exit 1
  fi
  
  options $@
   if [ -n "$help" ];then
      exit 0
   fi
   if [ -n "$ctx" ];then
      kubectl config use-context $ctx
   elif [ -n "$cls" ];then
      claster
      exit 0
   fi
   ctx=`kubectl config view -o jsonpath="{.current-context}"`
   get_pods 1
 }

function get_pods () {
  pods=()
  local pod_info=""
  if [ -n "$kw" ];then
    if [ -n "$all" ];then
      pod_info=`kubectl get pods -n $ns|grep -i "${kw//-/\-}"`
    else
      pod_info=`kubectl get pods -n $ns --show-labels|grep -v 'statefulset.kubernetes.io/pod-name'|grep -i "${kw//-/\-}"`
    fi
  else
    if [ -n "$all" ];then
      pod_info=`kubectl get pods -n $ns`
    else
      pod_info=`kubectl get pods -n $ns --show-labels|grep -v 'statefulset.kubernetes.io/pod-name'`
    fi
  fi
  if [[ $1 -eq 1 && $? -eq 1 ]]; then
    echo
    exit 1
  fi
  
  if [ -n "$kw" ];then
    pod_info=`echo "$pod_info"|awk '{print $1,$3,$(NF-1)}' 2>/dev/null`
  else
    pod_info=`echo "$pod_info"|awk 'NR>1 {print $1,$3,$(NF-1)}' 2>/dev/null`
  fi

  local infos=()
  local errs=()
  local i=0
  printf "\033[32m%3s    %-50s%-20s%s\033[0m\n" Id Name Status Age
  for p in ${pod_info[@]}; do
    infos[$(($i%3))]=$p
    let i=$i+1
    if [ $(($i%3)) -eq 0 ]; then
      if [ ${infos[1]} = 'Terminating' ]; then
        continue
      fi
    
      if [ ${infos[1]} = 'Running' ];then
        pods[${#pods[@]}]=${infos[0]}
        printf "\033[32m%3s    \033[36m%-50s%-20s%s\033[0m\n" ${#pods[@]} ${infos[0]} ${infos[1]} ${infos[2]}
      else
        errs[${#errs[@]}]="${infos[@]}"
      fi
    fi
  done
  
  for l in "${errs[@]}"; do
    local p=($l) 
    pods[${#pods[@]}]=${p[0]}
    printf "\033[31m%3s    %-50s%-20s%s\033[0m\n" ${#pods[@]} ${p[0]} ${p[1]} ${p[2]}
  done
    
  echo
  attach
}

function attach () {
  unset log;unset con;unset inf;unset pod;
  echo -n -e "\033[47;31mPlease enter Id entry or keyword search, help enter [h] or exit enter [q]\033[0m\n"
  echo "context：${ctx}，namespace：$ns"
  if [ -n "$kw" ];then
    echo "keyword：$kw"
  fi
  read -ep "xkube> " input
  history -s "$input" 2>/dev/null
  
  local args=($input)
  if [ ${#args[@]} -gt 1 ]; then
    args ${args[@]}
    execute
  elif [[ $args = "q" ]]; then
    echo 'bye'
    exit 0
  elif [[ $args = "r" ]]; then
    unset kw
    get_pods
  elif [[ $args = "h" ]]; then
    help
    attach
  elif [[ $args -ge 1 && $args -le ${#pods[@]} ]]; then
    signin $(($args-1))
    echo
    attach
  else
    if [ -n "$args" ];then
      kw=$args
    fi
    get_pods
  fi
}

function execute () {
  if [[ $pod -ge 1 && $pod -le ${#pods[@]} ]]; then
    local idx=$(($pod-1))
    if [ -n "$log" ];then
      logs $idx
    elif [ -n "$re" ];then
      redeploy $idx
    elif [ -n "$inf" ];then
      kubectl get pod ${pods[$idx]} -n $ns -o jsonpath="containers: %{range .status.containerStatuses[*]}[{.name}]:{.started} {end}{'\n'}name:%{.metadata.name}{'\n'}ip: %{.status.podIP}{'\n'}pod state: %{.status.phase}{'\n'}namespace: %{.metadata.namespace}{'\n'}startTime: %{.status.startTime}{'\n'}"| column -t -s %
    else
      signin $idx
    fi
    echo
    attach
  else
    kw=$pod
    get_pods
  fi
}

function logs() {
  if [ -n "$con" ];then
    kubectl logs ${pods[$1]} -c $con -n $ns
  else
    kubectl logs ${pods[$1]}  -n $ns
  fi
}

function signin() {
  if  [ -n "$con" ];then
    kubectl exec -it ${pods[$1]} -c $con -n $ns -- /bin/sh --login
  else
    kubectl exec -it ${pods[$1]} -n $ns -- /bin/sh --login
  fi
}

function claster() {
  ctx_info=`kubectl config view -o jsonpath="{.current-context}{'\n'}{.contexts[*].name}"`
  local act="";
  for p in ${ctx_info[@]}; do
    if [ -z $act ]; then
      act=$p
    else
      if [ $act = $p ];then
        printf "%-30s\033[32m%s\033[0m\n" $p 'activate'
      else
        echo  $p
      fi
    fi
  done
}

function replace() {
  local pod=$(eval kubectl get pods -n $ns -o jsonpath=\''{.items[?(@.metadata.labels.app=="'$2'")].metadata.name}'\')
  pods[$1]=$pod
}

function redeploy() {
  local deploy=(`kubectl get pod ${pods[$1]} -n $ns -o jsonpath="{.metadata.labels.app}  {.metadata.ownerReferences[0].kind}"`)
  if [ ${deploy[1]} = 'StatefulSet' ]; then
    kubectl rollout restart statefulset ${deploy[0]} -n $ns
  elif [ ${deploy[1]} = 'DaemonSet' ]; then
    kubectl rollout restart daemonset ${deploy[0]} -n $ns
  else
    kubectl rollout restart deployment ${deploy[0]} -n $ns
  fi
  
  local mr=0
  for i in $(seq 1 300); do   
    state $1
    if [ $? -ne 0 ]; then
      if [ $mr -eq 0 ]; then
        mr=1
      fi
      echo -n .
      sleep 1
    else
      replace $1 ${deploy[0]}
      if [ $mr -eq 0 ]; then
        echo -e "\r\033[32mrestart success \033[0m"
      else
        echo -e "\n\033[32mrestart success \033[0m"
      fi
      return
    fi
  done
  echo -e "\n\033[31mrestart fail \033[0m"
}

function state() {
  local state=`kubectl get pods -n $ns|grep ${pods[$1]}|awk '{print $3}'` 
  if [[ $state = 'Running' ]];then
     return 1
  elif [[ $state = 'Terminating' || $state = 'Pending' ]];then
     return 2
  else
     return 0
  fi
}

xkube $@